/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.63).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Film;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-10-16T13:57:59.465281663Z[GMT]")
@Validated
public interface FilmsApi {

    @Operation(summary = "Return a list of all available films.", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "list of films.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Film.class)))) })
    @RequestMapping(value = "/films",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Film>> filmsGet();


    @Operation(summary = "Remove a specific film.", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Film removed with successfully"),
        
        @ApiResponse(responseCode = "404", description = "Film not found") })
    @RequestMapping(value = "/films/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> filmsIdDelete(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id
);


    @Operation(summary = "Return information about specific film.", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Details of specific film", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Film.class))),
        
        @ApiResponse(responseCode = "404", description = "Film not found") })
    @RequestMapping(value = "/films/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Film> filmsIdGet(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id
);


    @Operation(summary = "Update information about specific film", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Film updated with successfully"),
        
        @ApiResponse(responseCode = "400", description = "error request"),
        
        @ApiResponse(responseCode = "404", description = "Film not found") })
    @RequestMapping(value = "/films/{id}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> filmsIdPut(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id
, @Parameter(in = ParameterIn.DEFAULT, description = "new details of film", required=true, schema=@Schema()) @Valid @RequestBody Film body
);


    @Operation(summary = "Add a new film (work with singol film)", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Film added with successfully"),
        
        @ApiResponse(responseCode = "400", description = "Error request (missing data)") })
    @RequestMapping(value = "/films",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> filmsPost(@Parameter(in = ParameterIn.DEFAULT, description = "add film details", required=true, schema=@Schema()) @Valid @RequestBody Film body
);

}

